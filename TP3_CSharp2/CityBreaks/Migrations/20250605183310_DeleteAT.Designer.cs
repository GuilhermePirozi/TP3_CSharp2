// <auto-generated />
using System;
using CityBreaks.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CityBreaks.Migrations
{
    [DbContext(typeof(CityBreaksContext))]
    [Migration("20250605183310_DeleteAT")]
    partial class DeleteAT
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("CityBreaks.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Country_Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("CityName");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Rio de Janeiro"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Name = "São Paulo"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 2,
                            Name = "Lisboa"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 2,
                            Name = "Porto"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 3,
                            Name = "Roma"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 4,
                            Name = "Paris"
                        });
                });

            modelBuilder.Entity("CityBreaks.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT")
                        .HasColumnName("Code");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryCode = "BR",
                            CountryName = "Brasil"
                        },
                        new
                        {
                            Id = 2,
                            CountryCode = "PT",
                            CountryName = "Portugal"
                        },
                        new
                        {
                            Id = 3,
                            CountryCode = "IT",
                            CountryName = "Itália"
                        },
                        new
                        {
                            Id = 4,
                            CountryCode = "FR",
                            CountryName = "França"
                        });
                });

            modelBuilder.Entity("CityBreaks.Models.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CityId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("City_Id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT")
                        .HasColumnName("PropertyName");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("TEXT")
                        .HasColumnName("Price");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            Name = "Copacabana Flat",
                            PricePerNight = 300.00m
                        },
                        new
                        {
                            Id = 2,
                            CityId = 2,
                            Name = "Studio Paulista",
                            PricePerNight = 280.00m
                        },
                        new
                        {
                            Id = 3,
                            CityId = 3,
                            Name = "Apartamento em Lisboa",
                            PricePerNight = 450.00m
                        },
                        new
                        {
                            Id = 4,
                            CityId = 4,
                            Name = "Suíte Ribeira",
                            PricePerNight = 400.00m
                        },
                        new
                        {
                            Id = 5,
                            CityId = 5,
                            Name = "Vila Romana",
                            PricePerNight = 520.00m
                        },
                        new
                        {
                            Id = 6,
                            CityId = 5,
                            Name = "Estúdio Trastevere",
                            PricePerNight = 390.00m
                        },
                        new
                        {
                            Id = 7,
                            CityId = 6,
                            Name = "Loft Montmartre",
                            PricePerNight = 600.00m
                        },
                        new
                        {
                            Id = 8,
                            CityId = 6,
                            Name = "Apartamento Torre Eiffel",
                            PricePerNight = 720.00m
                        });
                });

            modelBuilder.Entity("CityBreaks.Models.City", b =>
                {
                    b.HasOne("CityBreaks.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("CityBreaks.Models.Property", b =>
                {
                    b.HasOne("CityBreaks.Models.City", "City")
                        .WithMany("Properties")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("CityBreaks.Models.City", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("CityBreaks.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
